import logging
import instaloader
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import os
import subprocess
from instagram_scraper import download_instagram_story

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)
BOT_TOKEN = os.getenv("BOT_TOKEN")
USERNAME = os.getenv("LOGIN")
PASSWORD = os.getenv("PASSWORD")
INSTAGRAM_USERNAME = os.getenv("INSTAGRAM_USERNAME")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print("–ö–æ–º–∞–Ω–¥–∞ /start –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞.")
    print("–ü—Ä–∏–≤–µ—Ç! üëã –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    # await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    # await update.message.reply_photo(
    #     'https://www.imgonline.com.ua/examples/bee-on-daisy.jpg',
    #     caption="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞."
    # )
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print("–ö–æ–º–∞–Ω–¥–∞ /help –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞.")
    print(
        "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start, –∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    )
    # await update.message.reply_text(
    #     "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start.\n"
    #     "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start, –∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    # )


async def story_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"üîç –ò—â—É —Å—Ç–æ—Ä–∏—Å {INSTAGRAM_USERNAME}...")

    try:
        loader = instaloader.Instaloader(dirname_pattern="stories", download_videos=False,
                                         download_video_thumbnails=False)

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        loader.login(USERNAME, PASSWORD)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = instaloader.Profile.from_username(loader.context, INSTAGRAM_USERNAME)
        print('–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å', profile.username)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ—Ä–∏—Å
        stories = []
        print(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–æ—Ä–∏—Å –¥–ª—è {INSTAGRAM_USERNAME}")
        for story in loader.get_stories(userids=[profile.userid]):
            if not isinstance(story, instaloader.Story):
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ—Ä–∏—Å –¥–ª—è {INSTAGRAM_USERNAME}.")
                continue

            if not story.get_items():
                print(f"‚ùå –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å –¥–ª—è {INSTAGRAM_USERNAME}.")
                continue

            for item in story.get_items():
                loader.download_storyitem(item, target=f"{INSTAGRAM_USERNAME}_story")
                stories.append(item)

        if stories:
            first_item = stories[0]
            for file in os.listdir(f"{INSTAGRAM_USERNAME}_story"):
                if file.endswith(".jpg") and str(first_item.mediaid) in file:
                    with open(os.path.join(f"{INSTAGRAM_USERNAME}_story", file), "rb") as photo:
                        print(f'–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: {file}')
                        # await update.message.reply_photo(photo)
                    break
        else:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å.")
            # await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å.")
    except instaloader.exceptions.BadCredentialsException:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Instagram.")
    except instaloader.exceptions.ProfileNotExistsException:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü—Ä–æ—Ñ–∏–ª—å {INSTAGRAM_USERNAME} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


def download_stories_cli(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        subprocess.run([
            'instaloader',
            '--login', INSTAGRAM_USERNAME,
            '--stories-only',
            f':stories {INSTAGRAM_USERNAME}'
        ], check=True)
        print("‚úÖ –°—Ç–æ—Ä–∏—Å –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ CLI")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–æ—Ä–∏—Å —á–µ—Ä–µ–∑ CLI: {e}")

async def story_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # if not context.args:
    #     await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram: /story <username>")
    #     return
    #
    # username = context.args[0]
    print(f"üîç –ò—â—É —Å—Ç–æ—Ä–∏—Å {INSTAGRAM_USERNAME}...")
    # await update.message.reply_text(f"üîç –ò—â—É —Å—Ç–æ—Ä–∏—Å {INSTAGRAM_USERNAME}...")

    try:
        loader = instaloader.Instaloader(dirname_pattern="stories", download_videos=False, download_video_thumbnails=False)
        loader.login(USERNAME, PASSWORD)
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = instaloader.Profile.from_username(loader.context, INSTAGRAM_USERNAME)
        print('–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å', profile.username)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ—Ä–∏—Å
        stories = []
        print(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–æ—Ä–∏—Å –¥–ª—è {INSTAGRAM_USERNAME}")
        for story in loader.get_stories(userids=[profile.userid]):
            if not story.get_items():
                print("‚ùå –ù–µ—Ç —Å—Ç–æ—Ä–∏—Å.")
            else:
                for item in story.get_items():
                    loader.download_storyitem(item, target=f"{INSTAGRAM_USERNAME}_story")
                    stories.append(item)

        if stories:
            first_item = stories[0]
            for file in os.listdir(f"{INSTAGRAM_USERNAME}_story"):
                if file.endswith(".jpg") and str(first_item.mediaid) in file:
                    with open(os.path.join(f"{INSTAGRAM_USERNAME}_story", file), "rb") as photo:
                        print(f'–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: {file}')
                        # await update.message.reply_photo(photo)
                    break
        else:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å.")
            # await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å.")
    except instaloader.exceptions.BadCredentialsException:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Instagram.")
        # await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Instagram.")
    except instaloader.exceptions.ProfileNotExistsException:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü—Ä–æ—Ñ–∏–ª—å {INSTAGRAM_USERNAME} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        # await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü—Ä–æ—Ñ–∏–ª—å {INSTAGRAM_USERNAME} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        # await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def main() -> None:
    # –¢–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("story", story_command))
    application.add_handler(CommandHandler("download_stories_cli", download_stories_cli))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    application.run_polling()

if __name__ == '__main__':
    main()
