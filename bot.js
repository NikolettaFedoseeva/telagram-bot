require('dotenv').config();
const { Telegraf } = require('telegraf');
const schedule = require('node-schedule');
const { Builder, By } = require('selenium-webdriver');
const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new Telegraf(BOT_TOKEN);
const INSTAGRAM_USERNAME = 'shaurma.na.ugliah';
let autoMode = true;

if (!BOT_TOKEN) {
    console.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
    process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ Instagram
async function downloadInstagramStory() {
    let driver = await new Builder().forBrowser('chrome').build();
    try {
        await driver.get(`https://www.instagram.com/stories/${INSTAGRAM_USERNAME}/`);
        await driver.sleep(5000);

        let storyImage = await driver.findElement(By.css('img[srcset]'));
        let imageUrl = await storyImage.getAttribute('src');

        let imagePath = path.join(__dirname, 'story.jpg');
        let response = await fetch(imageUrl);
        let buffer = await response.arrayBuffer();
        fs.writeFileSync(imagePath, Buffer.from(buffer));

        return imagePath;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        return null;
    } finally {
        await driver.quit();
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
async function sendPoll(ctx, imagePath) {
    await ctx.replyWithPhoto({ source: fs.createReadStream(imagePath) }, { caption: '–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏?' });
    await ctx.sendPoll('–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º —ç—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è?', ['–î–∞', '–ù–µ—Ç']);
}

// –ö–æ–º–∞–Ω–¥–∞ /get_story
bot.command('get_story', async (ctx) => {
    let imagePath = await downloadInstagramStory();
    if (imagePath) {
        await sendPoll(ctx, imagePath);
    } else {
        ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é üòî');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /auto_mode
bot.command('auto_mode', (ctx) => {
    autoMode = !autoMode;
    ctx.reply(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º ${autoMode ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}.`);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–π
schedule.scheduleJob('0 7 * * *', async () => {
    if (autoMode) {
        let imagePath = await downloadInstagramStory();
        if (imagePath) {
            await bot.telegram.sendPhoto('@your_channel', { source: fs.createReadStream(imagePath) }, { caption: '–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏?' });
            await bot.telegram.sendPoll('@your_channel', '–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º —ç—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è?', ['–î–∞', '–ù–µ—Ç']);
        }
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ');
